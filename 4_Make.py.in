#!/usr/bin/env python3
"""Usage:
    4_Make.py [<config_name>] [--target <target>] [--config <config>] [--clean] [--cpus <nr_cpus>] [--help]

    This script builds the given target in the given configuration.

    If no <config_name> is given, the first configuration that already
    has a CMakeCache.txt file will be used.
    If you specify a <config_name> and there is no CMakeCache.txt file
    for that config, 4_Make.py call 3_Generate.py in order to try
    to create one.

    If no <target> is given, the "ALL_BUILD" target will be build.

Options:
    -h --help               Show this
    --target <target>       Specify the build target. For the options see the list below.
    --config <config>       Specify the configuration for multi-config build systems.
                            This is usually Debug or Release.
    --clean                 Use CMakes --clean-first option for the build, which triggers a fresh rebuild.
    --cpus <nr_cpus>        The number of cpu cores that should be used during the build.
                            If no number is given, the number of available physical cores plus the number
                            of hyper-threading cores will be used.

Custom Targets:
    The following custom targets may be available.
    The availability depends on the project configuration.

    Global Targets
    - abi-compliance-checker
    - acyclic
    - ALL_BUILD (Visual Studio) / all (Makefiles)
    - clang-format
    - clang-tidy
    - packageArchives
    - install
    - opencppcoverage
    - pipeline
    - runAllTests
    - runFastTests
    - valgrind
    - ZERO_CHECK (Visual Studio)

    Package Targets
    - abi-compliance-checker_<package-component>
    - clang-format_<binary-target>
    - clang-tidy_<package>
    - packageArchives_<package>
    - opencppcoverage_<package>
    - <package>
    - <package>_fixtures
    - <package>_tests
    - runAllTests_<package>
    - runFastTests_<package>
    - valgrind_<package>
    
"""

import sys
sys.path.append('@CPFBuildscripts_DIR@')

import os
from python.docopt import docopt
from python import buildautomat


_CPFCMake_DIR = '@CPFCMake_DIR@'
_CIBuildConfigurations_DIR = '@CIBuildConfigurations_DIR@'
_file_copied_from_version = '@CPFBuildscripts_VERSION@'

if __name__ == "__main__":
    _ARGS = docopt(__doc__, version=_file_copied_from_version)

    _AUTOMAT = buildautomat.BuildAutomat(
        os.path.dirname(os.path.realpath(__file__)),
        _CPFCMake_DIR,
        _CIBuildConfigurations_DIR
        )

    if not _AUTOMAT.cpf_buildscripts_version_is_compatible_to_copied_script(_file_copied_from_version):
        sys.exit(1)

    if not _AUTOMAT.make(_ARGS):
        print("Error: Script 4_Make.py failed.")
        sys.exit(2)
    else:
        sys.exit(0)

