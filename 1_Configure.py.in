#!/usr/bin/env python3
"""Usage: 
    1_Configure.py [<config_name>] [--inherits <parent_config>] [--list] [-D definition]...

    Running this script generates the file

    Configuration/<config_name>.config.cmake

    which contains a set of CMake variables that define one configuration of a CPF project.
    The configuration defines which compiler or make-file generator is used and other arbitrary
    settings. The generated config file can be changed by each developer to tweak the build or
    set different paths to dependencies.

    The short way of using this script is by only giving the <config_name> argument
    which in this case must be the name of one of the existing config file names that
    can be found at the following locations.

    <root>/Configuration                            
    <root>/Sources/CIBuildConfigurations
    <root>/Sources/CPFCMake/DefaultConfigurations

    If you want to create a configuration with a new name you can also specify
    the --inherits to pass in the parent configuration which allows you to set
    <config_name> freely.

    For more information about configurations see:
    https://knitschi.github.io/CMakeProjectFramework/doxygen/html/d7/d8d/_c_p_f_configuration.html

Options:

--inherits <parent_config>  This option must be set to an existing configuration from
                            which variable definitions are inherited. 

-D definition               This option can be given to set CMake variables
                            int the generated file over the command line.
                            This may be useful on a build-server.
                            <definition> should look something like this:
                            BUILD_SHARED_LIBS=TRUE

                            For implementation reasons, the following variable names are currently forbidden.

                            DERIVED_CONFIG PARENT_CONFIG CPF_ROOT_DIR CPFCMake_DIR CIBuildConfigurations_DIR

--list                      When this argument is given, the script will list
                            the available existing configurations instead
                            of generating a new file.

"""

import sys
sys.path.append('@CPFBuildscripts_DIR@')

import os
from python.docopt import docopt
from python import buildautomat
import cpfPackageVersion_CPFBuildscripts

_CPFCMake_DIR = '@CPFCMake_DIR@'
_CIBuildConfigurations_DIR = '@CIBuildConfigurations_DIR@'
_file_copied_from_version = '@CPFBuildscripts_VERSION@'

if __name__ == "__main__":
    _ARGS = docopt(__doc__, version=_file_copied_from_version)

    if not buildautomat.package_version_is_compatible_to_copied_script(_file_copied_from_version):
        print("Error: Script 1_Configure.py at version {0} is no longer compatible to your CPFBuildscripts package at version {1}. You need to run 0_CopyScripts.py again to update your local build-scripts.".format(_file_copied_from_version, cpfPackageVersion_CPFBuildscripts.getPackageVersion()))
        sys.exit(1)

    _AUTOMAT = buildautomat.BuildAutomat(
        os.path.dirname(os.path.realpath(__file__)),
        _CPFCMake_DIR,
        _CIBuildConfigurations_DIR
        )

    if not _AUTOMAT.configure(_ARGS):
        print("Error: Script 1_Configure.py failed.")
        sys.exit(1)
    else:
        sys.exit(0)

